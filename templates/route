import * as express from 'express';
import { Request, Response, Router } from 'express';
import { Logger } from '../services/logger';
{{websocketImport}}

{{authImport}}

import { {{pascalPlural}}Service } from '../services/{{paramSingular}}.service';
import { {{pascalSingular}} } from '../models/{{paramSingular}}';

const LOGGER = Logger.getLogger('{{pascalSingular}}Routes');

export class {{pascalSingular}}Routes {
    public static routes(): Router {
        LOGGER.info('Getting {{paramSingular}} routes');
        let routes: {{pascalSingular}}Routes = new this(Router());
        routes.bootstrap();
        return routes.getRouter();
    }

    private readonly router: Router;
    private {{camelPlural}}Service: {{pascalPlural}}Service;

    constructor(router: Router) {
        this.router = router;
        this.{{camelPlural}}Service = new {{pascalPlural}}Service();
    }

    public getRouter(): Router {
        return this.router;
    }

    private bootstrap(): void {
        {{websocketRoute}}

        {{authMiddleware}}

        this.router.get('/{{paramPlural}}', async (req: Request, res: Response) => {
            const {{camelPlural}}: {{pascalSingular}}[] = await this.{{camelPlural}}Service.getAll();
            res.status(200).json({ {{camelPlural}} });
        })
        this.router.post('/{{paramPlural}}', async (req: Request, res: Response) => {
            const {{camelSingular}} = req.body as {{pascalSingular}};
            let created{{pascalSingular}}: {{pascalSingular}} = null;

            try {
                created{{pascalSingular}} = await this.{{camelPlural}}Service.create({{camelSingular}})
            } catch (e) {
                return res.status(500).json(e);
            }

            res.status(200).end();
        })
        this.router.get('/{{paramPlural}}/:id', async (req: Request, res: Response) => {
            res.status(200).end();
        })
        this.router.put('/{{paramPlural}}/:id', async (req: Request, res: Response) => {
            res.status(200).end();
        })
        this.router.delete('/{{paramPlural}}/:id', async (req: Request, res: Response) => {
            res.status(200).end();
        })
    }
}